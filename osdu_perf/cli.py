"""
CLI interface for the OSDU Performance Testing Framework.
"""

import argparse
import sys
import os
from typing import List, Optional


def create_locustfile_template(output_path: str, service_names: Optional[List[str]] = None) -> None:
    """
    Create a locustfile.py template with the framework.
    
    Args:
        output_path: Path where to create the locustfile.py
        service_names: Optional list of service names to include in template
    """
    template = '''"""
Locust Performance Test for OSDU Services
Generated by OSDU Performance Testing Framework
"""

from locust import events
from osdu_perf import PerformanceUser


# STEP 1: Register custom CLI args with Locust
@events.init_command_line_parser.add_listener
def add_custom_args(parser):
    parser.add_argument("--partition", type=str, help="Partition ID", required=True)
    parser.add_argument("--appid", type=str, help="OSDU App ID", required=True)


class OSDUUser(PerformanceUser):
    """
    OSDU Performance Test User
    
    This class inherits from PerformanceUser which automatically:
    - Discovers services in the 'services' directory
    - Handles Azure authentication
    - Orchestrates service execution
    """
    pass


# Optional: Add custom tasks here if needed
# @task
# def custom_task(self):
#     # Your custom test logic here
#     pass
'''
    
    with open(output_path, 'w') as f:
        f.write(template)
    
    print(f"‚úÖ Created locustfile.py at {output_path}")


def create_service_template(service_name: str, output_dir: str) -> None:
    """
    Create a service template file.
    
    Args:
        service_name: Name of the service
        output_dir: Directory where to create the service file
    """
    template = f'''"""
{service_name} Service for Performance Testing
"""

from osdu_perf import BaseService


class {service_name.capitalize()}Service(BaseService):
    """
    Performance test service for {service_name}
    """
    
    def __init__(self, client=None):
        super().__init__(client)
        self.name = "{service_name}"
    
    def execute(self, headers=None, partition=None, base_url=None):
        """
        Execute {service_name} service tests
        
        Args:
            headers: HTTP headers including authentication
            partition: Data partition ID
            base_url: Base URL for the service
        """
        # TODO: Implement your service-specific test logic here
        
        # Example API call:
        # response = self.client.get(
        #     f"{{base_url}}/api/{service_name}/health",
        #     headers=headers,
        #     name="{service_name}_health_check"
        # )
        
        print(f"Executing {service_name} service tests...")
        pass
'''
    
    os.makedirs(output_dir, exist_ok=True)
    service_file = os.path.join(output_dir, f"{service_name}_service.py")
    
    with open(service_file, 'w') as f:
        f.write(template)
    
    print(f"‚úÖ Created {service_name} service template at {service_file}")


def init_project(project_name: str) -> None:
    """
    Initialize a new performance testing project.
    
    Args:
        project_name: Name of the project
    """
    print(f"üöÄ Initializing OSDU Performance Testing project: {project_name}")
    
    # Create project directory
    os.makedirs(project_name, exist_ok=True)
    
    # Create services directory
    services_dir = os.path.join(project_name, "services")
    os.makedirs(services_dir, exist_ok=True)
    
    # Create __init__.py in services directory
    with open(os.path.join(services_dir, "__init__.py"), 'w') as f:
        f.write("# Services package\\n")
    
    # Create locustfile.py
    locustfile_path = os.path.join(project_name, "locustfile.py")
    create_locustfile_template(locustfile_path)
    
    # Create example service
    create_service_template("example", services_dir)
    
    # Create requirements.txt
    requirements_path = os.path.join(project_name, "requirements.txt")
    with open(requirements_path, 'w') as f:
        f.write("osdu-perf>=1.0.0\\nlocust>=2.0.0\\n")
    
    # Create README.md
    readme_path = os.path.join(project_name, "README.md")
    with open(readme_path, 'w') as f:
        f.write(f"""# {project_name} Performance Tests

This project uses the OSDU Performance Testing Framework.

## Setup

1. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

2. Add your service test files to the `services/` directory

3. Run tests:
   ```bash
   locust -f locustfile.py --host https://your-api-host.com --partition your-partition-id --appid your-app-id
   ```

## Adding Services

Create new service files in the `services/` directory that inherit from `BaseService`.
The framework will automatically discover and execute them.
""")
    
    print(f"‚úÖ Project initialized successfully in {project_name}/")
    print("\\nüìù Next steps:")
    print(f"   1. cd {project_name}")
    print("   2. pip install -r requirements.txt")
    print("   3. Add your service tests to the services/ directory")
    print("   4. Run: locust -f locustfile.py --host <your-host> --partition <partition> --appid <app-id>")


def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(
        description="OSDU Performance Testing Framework CLI"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Init command
    init_parser = subparsers.add_parser('init', help='Initialize a new performance testing project')
    init_parser.add_argument('name', help='Project name')
    
    # Create service command
    service_parser = subparsers.add_parser('create-service', help='Create a new service template')
    service_parser.add_argument('name', help='Service name')
    service_parser.add_argument('--output-dir', default='./services', help='Output directory (default: ./services)')
    
    # Create locustfile command
    locust_parser = subparsers.add_parser('create-locustfile', help='Create a locustfile.py template')
    locust_parser.add_argument('--output', default='./locustfile.py', help='Output path (default: ./locustfile.py)')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'init':
            init_project(args.name)
        elif args.command == 'create-service':
            create_service_template(args.name, args.output_dir)
        elif args.command == 'create-locustfile':
            create_locustfile_template(args.output)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
